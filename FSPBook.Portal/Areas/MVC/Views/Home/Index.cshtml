@model List<FSPBook.Core.Models.PostModel>
@{
    ViewData["Title"] = "Posts";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}
<style>
    .container {
        margin: 20px;
    }

    .post {
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    h1 {
        margin-bottom: 20px;
    }

    button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
</style>

<div class="container">
    <h1>Recent Posts</h1>
    <div id="posts-container">
        @foreach (var post in Model)
        {
            <div class="post">
                <h3>
                    <a href="MVC/Profile/Index/@post.AuthorId">@post.AuthorName</a>
                </h3>
                <p class="created-at" data-postid="@post.Id" data-timestamp="@post.DateTimePosted.ToString("o")">@post.DateTimePosted.ToLocalTime().ToString("g")</p>
                <p>@post.Content</p>
            </div>
        }
    </div>

    <button id="load-more" data-page="0">Load More</button>
    @* <a id="newPost" href="/" style="display:none"> New posts available, click here to refresh the page </a> *@
</div>

<script>
    var latestPostId = null;
    document.getElementById("load-more").addEventListener("click", function () {
        const button = this;
        const page = parseInt(button.getAttribute("data-page")) + 1;
        
        const container = document.getElementById("posts-container");
         
        if (latestPostId == null) {
            const posts = container.querySelectorAll(".post");
            if (posts.length > 0) {
                const lastPost = posts[posts.length - 1];
                latestPostId = lastPost.querySelector(".created-at").dataset.postid;
            }
        }
        fetch(`/MVC/Home/LoadMorePosts`, {
                method: "POST", // Set the HTTP method to POST
                headers: {
                    "Content-Type": "application/json", // Specify the content type
                },
                body: JSON.stringify({
                    PageNumber: page,       // Pass data in the request body
                    LatestPostId: latestPostId,
                }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to fetch posts");
                }
                return response.text(); // Parse the response as text
            })
            .then(html => {
                container.innerHTML += html; // Append the returned HTML to the container
                button.setAttribute("data-page", page); // Update the button's data attribute
            })
            .catch(error => {
                console.error("Error loading posts:", error);
            });
    });
    
</script>